#!/usr/bin/python

import sys
import getopt
from lxml import etree

def usage():
    print "workflowGraph --workflow=file --output=file"
    sys.exit(-1)

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hw:o:", ["help", "workflow=", "output="])
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()

    filename = None
    outfile = None
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
        elif o in ("-w", "--workflow"):
    	    filename = a
        elif o in ("-o", "--output"):
    	    outfile = a
        else:
            assert False, "unhandled option"
            
    if filename is None:
	usage()
	
	
    workflow = Workflow(filename=filename)

    if outfile is None:
	outfile = "%s.dot" % workflow.getName()
    print "Generating graph for '%s', output to '%s'" % (workflow.getTitle(), outfile)

    out = open(outfile, "w")
    out.write(GraphViz.header)
    
    for state in workflow.getStates():
    	out.write("    %s [label =\"%s\"];\n" % (state.getId(), state.getLabel()))

    out.write("\n\n    // Transitions\n""")
    
    for state in workflow.getStates():
	for transition in state.getTransitions():
		out.write("    %s -> %s [label=\"%s\"];\n" % (state.getId(), transition.getDestination(), transition.getLabel()))

    out.write(GraphViz.footer)


class State:
    def __init__(self, workflow, id, label):
	self.id = id
	self.label = label
	self.transitions = []
	self.workflow = workflow

    def addExitTransition(self, transitionid):
	self.transitions.append( self.workflow.getTransition(transitionid))
		
    def getId(self):
	return self.id

    def getLabel(self):
	return self.label

    def getTransitions(self):
	return self.transitions

class Transition:
    def __init__(self, id, label, destination):
	self.id = id
	self.label = label
	self.destination = destination

    def getDestination(self):
	return self.destination

    def getLabel(self):
	return self.label

class Workflow:
    
    def __init__(self, filename=None):
	self.file = open(filename)
	self._read()
	
    def _read(self):
	self.tree = etree.parse(self.file)
	self.name = self.tree.xpath("/dc-workflow/@workflow_id")[0]
	self.title = self.tree.xpath("/dc-workflow/@title")[0]
	self.xmlstates = self.tree.xpath("//state")
	self._parseStates()

    def _parseStates(self):
	self.states = []
	for xmlstate in self.xmlstates:
	    """
	    Parse this XML:
	    <state state_id="idea" title="Idea">
	    """
	    state = State(self, xmlstate.get("state_id"), xmlstate.get("title")) 
	    """
	    Parse 
	        <exit-transition transition_id="todraft"/>
	        <exit-transition transition_id="reject"/>
	    """
	    for child in xmlstate:
		if child.tag == "exit-transition":
		    state.addExitTransition( child.get("transition_id") )
	    self.states.append( state )
	

    def getTitle(self):
	return self.title

    def getName(self):
	return self.name
	
    def getStates(self):
	return self.states
	
    def getTransition(self, transitionid):
	"""
	Parse XML:
	 <transition transition_id="todraft" title="Make Draft"
		 new_state="draft" trigger="USER"
		 ...
		 <action ...>Label</action>
	"""
	transition = self.tree.xpath("//transition[@transition_id=\"%s\"]" % transitionid)[0]
	#title = transition.get("title")
	label = transition.xpath("action")[0].text
	newstate = transition.get("new_state")
	return Transition(transitionid, label, newstate)
	

class GraphViz:
    header = """
/*
This is Automatically generated by workflowGraph

Use graphviz to generate images. The command line is

  dot -Tps -Grankdir=LR states.dot > states.ps

*/

digraph states {
//    size="3,2";
    rankdir=TB;  
    node [shape=ellipse];

    // States
"""

    footer = """

}

"""


if __name__ == "__main__":
    main()

