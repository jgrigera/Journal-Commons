Metadata-Version: 1.0
Name: journalcommons.Conference
Version: 0.1.4
Summary: A product to organize conferences
Home-page: http://svn.plone.org/svn/plone/plone.example
Author: Journal Commmons
Author-email: jcommons@jcommons.org
License: GPL
Description: .. contents::
        
        .. Note!
        -----
        Update the following URLs to point to your:
        
        - code repository
        - bug tracker
        - questions/comments feedback mail
        (do not set a real mail, to avoid spams)
        
        Or remove it if not used.
        
        - Code repository: http://svn.somewhere.com/...
        - Questions and comments to somemailing_list
        - Report bugs at http://bug.somewhere.com/..
        
        
        Change history
        **************
        
        Changelog
        =========
        
        0.1.4 -
        ----------------
        
        * Added conference view
        * Removed global_allow for conferencepaper
        * Removed ConferencePaper from navigation
        
        0.1 - Unreleased
        ----------------
        
        * Initial release
        
        
        Detailed Documentation
        **********************
        
        Introduction
        ============
        
        This is a full-blown functional test. The emphasis here is on testing what
        the user may input and see, and the system is largely tested as a black box.
        We use PloneTestCase to set up this test as well, so we have a full Plone site
        to play with. We *can* inspect the state of the portal, e.g. using
        self.portal and self.folder, but it is often frowned upon since you are not
        treating the system as a black box. Also, if you, for example, log in or set
        roles using calls like self.setRoles(), these are not reflected in the test
        browser, which runs as a separate session.
        
        Being a doctest, we can tell a story here.
        
        First, we must perform some setup. We use the testbrowser that is shipped
        with Five, as this provides proper Zope 2 integration. Most of the
        documentation, though, is in the underlying zope.testbrower package.
        
        >>> from Products.Five.testbrowser import Browser
        >>> browser = Browser()
        >>> portal_url = self.portal.absolute_url()
        
        The following is useful when writing and debugging testbrowser tests. It lets
        us see all error messages in the error_log.
        
        >>> self.portal.error_log._ignored_exceptions = ()
        
        With that in place, we can go to the portal front page and log in. We will
        do this using the default user from PloneTestCase:
        
        >>> from Products.PloneTestCase.setup import portal_owner, default_password
        
        >>> browser.open(portal_url)
        
        We have the login portlet, so let's use that.
        
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        
        Here, we set the value of the fields on the login form and then simulate a
        submit click.
        
        We then test that we are still on the portal front page:
        
        >>> browser.url == portal_url
        True
        
        And we ensure that we get the friendly logged-in message:
        
        >>> "You are now logged in" in browser.contents
        True
        
        
        -*- extra stuff goes here -*-
        The ConferencePaper content type
        ================================
        
        In this section we are tesing the ConferencePaper content type by performing
        basic operations like adding, updadating and deleting ConferencePaper content
        items.
        
        Adding a new ConferencePaper content item
        -----------------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'ConferencePaper' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('ConferencePaper').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'ConferencePaper' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'ConferencePaper Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        And we are done! We added a new 'ConferencePaper' content item to the portal.
        
        Updating an existing ConferencePaper content item
        -------------------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
        >>> browser.getLink('Edit').click()
        >>> browser.getControl(name='title').value = 'New ConferencePaper Sample'
        >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
        >>> 'Changes saved' in browser.contents
        True
        >>> 'New ConferencePaper Sample' in browser.contents
        True
        
        Removing a/an ConferencePaper content item
        ------------------------------------------
        
        If we go to the home page, we can see a tab with the 'New ConferencePaper
        Sample' title in the global navigation tabs.
        
        >>> browser.open(portal_url)
        >>> 'New ConferencePaper Sample' in browser.contents
        True
        
        Now we are going to delete the 'New ConferencePaper Sample' object. First we
        go to the contents tab and select the 'New ConferencePaper Sample' for
        deletion.
        
        >>> browser.getLink('Contents').click()
        >>> browser.getControl('New ConferencePaper Sample').click()
        
        We click on the 'Delete' button.
        
        >>> browser.getControl('Delete').click()
        >>> 'Item(s) deleted' in browser.contents
        True
        
        So, if we go back to the home page, there is no longer a 'New ConferencePaper
        Sample' tab.
        
        >>> browser.open(portal_url)
        >>> 'New ConferencePaper Sample' in browser.contents
        False
        
        Adding a new ConferencePaper content item as contributor
        --------------------------------------------------------
        
        Not only site managers are allowed to add ConferencePaper content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = 'contributor'
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        We select 'ConferencePaper' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('ConferencePaper').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'ConferencePaper' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'ConferencePaper Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        Done! We added a new ConferencePaper content item logged in as contributor.
        
        Finally, let's login back as manager.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        
        The Conference content type
        ===============================
        
        In this section we are tesing the Conference content type by performing
        basic operations like adding, updadating and deleting Conference content
        items.
        
        Adding a new Conference content item
        ------------------------------------
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        Then we select the type of item we want to add. In this case we select
        'Conference' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('Conference').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'Conference' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'Conference Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        And we are done! We added a new 'Conference' content item to the portal.
        
        Updating an existing Conference content item
        --------------------------------------------
        
        Let's click on the 'edit' tab and update the object attribute values.
        
        >>> browser.getLink('Edit').click()
        >>> browser.getControl(name='title').value = 'New Conference Sample'
        >>> browser.getControl('Save').click()
        
        We check that the changes were applied.
        
        >>> 'Changes saved' in browser.contents
        True
        >>> 'New Conference Sample' in browser.contents
        True
        
        Removing a/an Conference content item
        -------------------------------------
        
        If we go to the home page, we can see a tab with the 'New Conference
        Sample' title in the global navigation tabs.
        
        >>> browser.open(portal_url)
        >>> 'New Conference Sample' in browser.contents
        True
        
        Now we are going to delete the 'New Conference Sample' object. First we
        go to the contents tab and select the 'New Conference Sample' for
        deletion.
        
        >>> browser.getLink('Contents').click()
        >>> browser.getControl('New Conference Sample').click()
        
        We click on the 'Delete' button.
        
        >>> browser.getControl('Delete').click()
        >>> 'Item(s) deleted' in browser.contents
        True
        
        So, if we go back to the home page, there is no longer a 'New Conference
        Sample' tab.
        
        >>> browser.open(portal_url)
        >>> 'New Conference Sample' in browser.contents
        False
        
        Adding a new Conference content item as contributor
        ---------------------------------------------------
        
        Not only site managers are allowed to add Conference content items, but
        also site contributors.
        
        Let's logout and then login as 'contributor', a portal member that has the
        contributor role assigned.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = 'contributor'
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        We use the 'Add new' menu to add a new content item.
        
        >>> browser.getLink('Add new').click()
        
        We select 'Conference' and click the 'Add' button to get to the add form.
        
        >>> browser.getControl('Conference').click()
        >>> browser.getControl(name='form.button.Add').click()
        >>> 'Conference' in browser.contents
        True
        
        Now we fill the form and submit it.
        
        >>> browser.getControl(name='title').value = 'Conference Sample'
        >>> browser.getControl('Save').click()
        >>> 'Changes saved' in browser.contents
        True
        
        Done! We added a new Conference content item logged in as contributor.
        
        Finally, let's login back as manager.
        
        >>> browser.getLink('Log out').click()
        >>> browser.open(portal_url)
        >>> browser.getControl(name='__ac_name').value = portal_owner
        >>> browser.getControl(name='__ac_password').value = default_password
        >>> browser.getControl(name='submit').click()
        >>> browser.open(portal_url)
        
        
        
        
        Contributors
        ************
        
        Juan Grigera, Author
        Toni Prug, Author
        
        
        Download
        ********
        
Keywords: conference
Platform: UNKNOWN
Classifier: Framework :: Plone
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: License :: OSI Approved :: GNU General Public License (GPL)
